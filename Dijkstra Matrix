#include <bits/stdc++.h>
using namespace std;
 
// _____ ____   ___  __  __    __     ___   _ _   _    __        _____ _____ _   _ 
//|  ___|  _ \ / _ \|  \/  |   \ \   / / | | | | | |   \ \      / /_ _|_   _| | | |
//| |_  | |_) | | | | |\/| |    \ \ / /| |_| | | | |    \ \ /\ / / | |  | | | |_| |
//|  _| |  _ <| |_| | |  | |     \ V / |  _  | |_| |     \ V  V /  | |  | | |  _  |
//|_|   |_|_\_\\___/|_|__|_|      \_/  |_| |_|\___/       \_/\_/  |___| |_| |_| |_|
// _     _____     _______ 
//| |   / _ \ \   / / ____|
//| |  | | | \ \ / /|  _|  
//| |__| |_| |\ V / | |___ 
//|_____\___/  \_/  |_____| 


typedef long long ll;
typedef double db;
typedef pair<int, int> ii;
typedef pair<ll, int> lli;
typedef unsigned long long ull;
typedef vector<int> vi;
typedef vector<vector<int>> vii;
typedef vector<vector<ii>> vpi;
#define fi first
#define se second
#define pb push_back
#define ed cout << "\n"
#define no cout << "NO\n"
#define ye cout << "YES\n"
#define FOR(i, l, r) for (int i = l; i <= r; i++)
#define FOD(i, r, l) for (int i = r; i >= l; i--)
#define FOB(i, l, r) for (int i = l; i < r; i++)
#define mem(a, b) memset(a, b, sizeof(a))
#define all(a) a.begin(), a.end()
#define sz(A) (int)A.size()
#define faster() ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL)
template <typename T, typename U> inline bool chmax(T &a, U b) { return a < b ? (a = b, true) : false; }
template <typename T, typename U> inline bool chmin(T &a, U b) { return a > b ? (a = b, true) : false; }
const int N = 5e5 + 15;
const int MOD = 1e9 + 7;

const int dx[] = {-1, 0, 0, 1};
const int dy[] = {0, -1, 1, 0};
int n, m, INF = 1e9;
int a[505][505], step[505][505];
bool vis[505][505];


int check(int x, int y){
	return x <= 0 || x > n || y <= 0 || y > n;
}

void Dijkstra(){
	priority_queue<pair<int, pair<int, int>>, vector<pair<int, pair<int, int>>>, greater<pair<int, pair<int, int>>>>Q;
	FOR(i, 1, n){
		FOR(j, 1, m){
			step[i][j] = INF;
		}
	}
	step[1][1] = a[1][1]; // trong so o dau tien
	Q.push({a[1][1], {1, 1}});
	while(!Q.empty()){
		auto it = Q.top(); Q.pop();
		int u1 = it.se.fi, u2 = it.se.se;
		if(vis[u1][u2]) continue;
		vis[u1][u2] = 1;
		for(int k = 0; k < 4; k++){
			int imoi = u1 + dx[k];
			int jmoi = u2 + dy[k];
			if(step[imoi][jmoi] > step[u1][u2] + a[imoi][jmoi]){
				step[imoi][jmoi] = step[u1][u2] + a[imoi][jmoi];
				Q.push({step[imoi][jmoi],{imoi, jmoi}});
			}
		}
	}
	cout << step[n][m] << endl;
}

void solve(){
	cin >> n >> m;
	FOR(i, 1, n){
		FOR(j, 1, m){
			cin >> a[i][j];
		}
	}
	Dijkstra();
}
	

int main(){
    faster();
      freopen("input.INP", "r", stdin);
     //freopen("output.OUT", "w", stdout);
    int t; t = 1; 
    //cin >> t;
    while(t--) 
        solve();
    return 0;
}
