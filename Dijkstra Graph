#include <bits/stdc++.h>
using namespace std;
 
// _____ ____   ___  __  __    __     ___   _ _   _    __        _____ _____ _   _ 
//|  ___|  _ \ / _ \|  \/  |   \ \   / / | | | | | |   \ \      / /_ _|_   _| | | |
//| |_  | |_) | | | | |\/| |    \ \ / /| |_| | | | |    \ \ /\ / / | |  | | | |_| |
//|  _| |  _ <| |_| | |  | |     \ V / |  _  | |_| |     \ V  V /  | |  | | |  _  |
//|_|   |_|_\_\\___/|_|__|_|      \_/  |_| |_|\___/       \_/\_/  |___| |_| |_| |_|
// _     _____     _______ 
//| |   / _ \ \   / / ____|
//| |  | | | \ \ / /|  _|  
//| |__| |_| |\ V / | |___ 
//|_____\___/  \_/  |_____| 


typedef long long ll;
typedef double db;
typedef pair<int, int> ii;
typedef pair<ll, int> lli;
typedef unsigned long long ull;
typedef vector<int> vi;
typedef vector<vector<int>> vii;
typedef vector<vector<ii>> vpi;
#define fi first
#define se second
#define pb push_back
#define ed cout << "\n"
#define no cout << "NO\n"
#define ye cout << "YES\n"
#define FOR(i, l, r) for (int i = l; i <= r; i++)
#define FOD(i, r, l) for (int i = r; i >= l; i--)
#define FOB(i, l, r) for (int i = l; i < r; i++)
#define mem(a, b) memset(a, b, sizeof(a))
#define all(a) a.begin(), a.end()
#define sz(A) (int)A.size()
#define faster() ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL)
template <typename T, typename U> inline bool chmax(T &a, U b) { return a < b ? (a = b, true) : false; }
template <typename T, typename U> inline bool chmin(T &a, U b) { return a > b ? (a = b, true) : false; }
const int N = 1e5 + 15;
const int MOD = 1e9 + 7;
int n, m, s, t;
vector<pair<int, int>>adj[N];
bool vis[N] = {};
int parent[N] = {};
//queue<tuple<int, int, int, int>> q;

void Dijkstra(){
	priority_queue<pair<ll, int>, vector<pair<ll, int>>, greater<pair<ll, int>>>Q;
	vector<ll>step(n + 1, 1e18 + 1);
	step[s] = 0; parent[s] = s;
	Q.push({0, s});
	while(!Q.empty()){
		auto it = Q.top(); Q.pop();
		int u = it.se;
		if(vis[u]) continue;
		vis[u] = 1;
		for(auto it : adj[u]){
			int v = it.se; int w = it.fi;
			if(step[v] > step[u] + w){
				step[v] = step[u] + w;
				Q.push({step[v], v});
				parent[v] = u;
				}
			}
		}
//	cout << step[t] << endl;
//	vector<int>path;
//	while(1){
//		path.pb(t);
//		if(t == s) break;
//		t = parent[t];
//	}
//	reverse(all(path));
	FOR(i, 1, n) cout << step[i] << ' ';
}
void solve(){
	cin >> n >> m;
	s = 1, t = n;
	FOB(i, 0, m){
		int x, y, w;
		cin >> x >> y >> w;
		adj[x].pb({w, y});
	}
	Dijkstra();
}
	

int main(){
    faster();
       freopen("input.INP", "r", stdin);
     //freopen("output.OUT", "w", stdout);
    int t; t = 1; 
    //cin >> t;
    while(t--) 
        solve();
    return 0;
}
